@using LupusBlazor.UI;
@using Wolfden.Client.Pages.Game.UserInterface.UnitDescriptions;

@implements IUnitUI


<div id="unit-UI">

    <div id="character-portrait">
        @if (UnitName != null)
        {
            <img src="/images/Character portraits/@(UnitName).png" />
        }
    </div>
    <div id="skill-1"><button class="btn btn-secondary" @onclick="()=> { ClickSkill(0); }">
        @if (SkillNames[0] != null)
        {
            
            <img src="/images/Skill icons/@(SkillNames[0]).png" />
            <div class="key">Q</div> 
            
        }
    </button></div>
    <button class="btn btn-secondary skill-2"></button>
    <button class="btn btn-secondary skill-3"></button>
</div>

@code {
    public string UnitName { get; set; }
    public int SkillSlotsUsed;
    public string[] SkillNames { get; set; } = new string[2];

    public Action[] SkillOnClicks { get; set; } = new Action[2];

    public void SetCharacterSkill(string name, Action onclick)
    {
        if (SkillSlotsUsed >= SkillNames.Length)
            return;

        SkillNames[SkillSlotsUsed] = name;
        SkillOnClicks[SkillSlotsUsed] = onclick;
        base.StateHasChanged();
    }

    public void SetCharacterUI(string name)
    {
        UnitName = name;
        base.StateHasChanged();
    }

    public void ResetCharacterUI()
    {
        for (var i = 0; i < SkillNames.Length; i++)
        {
            SkillNames[i] = null;
            SkillOnClicks[i] = null;
            SkillSlotsUsed = 0;
        }
        base.StateHasChanged();
    }

    public void ClickSkill(int index)
    {
        if (SkillOnClicks.Length > index && SkillOnClicks[index] != null)
            SkillOnClicks[index]();
    }
}
