@using LupusBlazor
@using LupusBlazor.UI;
@using Lupus;
@using Wolfden.Client.Shared;
@using Wolfden.Client.Shared.Dashboard.Controls;
@using Wolfden.Client.Pages.Game.UserInterface.WinConditions;
@using Wolfden.Client.Pages.Game.UserInterface.UnitDescriptions;
@using Wolfden.Client.Pages.Game.UserInterface.Messages

@inject IJSRuntime JS

@implements IUI

<div  id="UI">
    
    <Overlay @ref="Overlay"></Overlay>
    <PlayersUI @ref="PlayersUI"></PlayersUI>
    <GatherChestsWinConditionUI @ref="GatherChestsWinConditionUI"></GatherChestsWinConditionUI>
    <Message @ref="TextMessage"></Message>
    <UndoMessage @ref="UndoMessage"></UndoMessage>
    <Loading @ref="Loading"></Loading>

    
    <div id="menu-panel">
        <div class="buttons">
            <Button @ref="UndoButton" IconClass="fa-solid fa-rotate-left" State="Models.State.Danger" />
            <button class="btn btn-secondary" @onclick="OpenWinCondition">
                <i class="fas fa-trophy "></i>
            </button>
            <button class="btn btn-secondary" @onclick="OpenPlayers">
                <i class="fas fa-users "></i>
            </button>
            <button class="btn btn-secondary" @onclick="ToggleFullscreen">
                <i class="fas fa-expand "></i>
            </button>
            <button class="btn btn-secondary" @onclick="OpenOptions">
                <i class="fas fa-cog "></i>
            </button>
            <button class="btn @(EndTurnButtonClass)" @onclick="ClickEndTurn">
               <i class="fas fa-forward"></i>
            </button>
        </div>
        <div id="current-player" style="background-color:@(BlazorGame?.CurrentPlayer?.Color.ToString())"></div>
    </div>
    


    <div id="skill-panel">
        <div id="active-players">
            @foreach (var player in BlazorGame?.TurnResolver?.ActivePlayers ?? new ())
            {
                <div style="background-color:@(player.Color)">  </div>
            }
        </div>

        <UnitUI @ref="UnitUI"></UnitUI>
        @*<div id="endTurn"><button class="btn btn-secondary" id="endTurnButton" @onclick="ClickEndTurn"><h3>End turn</h3></button></div>*@
    </div>
    

</div>

@code {
    public IButton? UndoButton { get; set; }
    public ITextMessage? TextMessage { get; set; }
    public IMessage? UndoMessage { get; set; }

    public BlazorGame? BlazorGame { get; set; }

    private string EndTurnButtonClass = "btn-secondary";

    private List<Player> Players { get; set; } = new List<Player>();
    private List<Player> ActivePlayers { get; set; } = new List<Player>();
    private Player CurrentPlayer { get; set; }

    private Overlay? Overlay { get; set; }
    public IUnitUI UnitUI { get; set; }
    public Loading Loading { get; set; }
    public int SkillSlotsUsed;
    public string[] SkillImages { get; set; } = new string[2];
    public Func<Task>[] SkillOnClicks { get; set; } = new Func<Task>[2];

    public string PortraitAssetPath { get; set; }
    public PlayersUI PlayersUI { get; set; }
    public IGatherChestsWinConditionUI GatherChestsWinConditionUI { get; set; }
    public event EventHandler EndTurnButtonClickedEvent;
    public event EventHandler<MouseEventArgs> MouseClickEvent;
    public event EventHandler MouseRightClickEvent;
    public event EventHandler<KeyboardEventArgs> KeyboardPressEvent;

    public async Task MouseClick(MouseEventArgs e)
    {
        MouseClickEvent?.Invoke(this, e);

        if (e.Button == 2)
        {
            MouseRightClickEvent?.Invoke(this, EventArgs.Empty);
        }
    }

    public void ClickEndTurn()
    {
        EndTurnButtonClickedEvent?.Invoke(this, EventArgs.Empty);
    }

    public void SetPlayers(List<Player> players, List<Player> activePlayer, Player currentPlayer)
    {
        this.Players = players;
        this.ActivePlayers = activePlayer;
        this.CurrentPlayer = currentPlayer;
    }

    public void DoneLoading()
    {
        this.Loading.LoadingIsDone();
        this.StateHasChanged();
    }

    public void HandleKeyPress(KeyboardEventArgs e)
    {
        KeyboardPressEvent?.Invoke(this, e);

        if (e.Code == "KeyQ")
        {
            UnitUI.ClickSkill(0);
        }
    }

    private void OpenWinCondition()
    {
        Overlay?.Open(typeof(GatherChestsWinConditionDescription));
    }

    private void OpenPlayers()
    {
        var parameters = new Dictionary<string, object>()
        {
            { "Players", this.Players },
            { "CurrentPlayer", this.CurrentPlayer },
            { "ActivePlayers", this.ActivePlayers }
        };

        Overlay?.Open(typeof(PlayersUI), parameters);
    }

    private void OpenOptions()
    {
        Overlay?.Open(typeof(Options), new Dictionary<string, object>() { { "Overlay", Overlay } });
    }

    private async Task ToggleFullscreen()
    {
        await JS.InvokeVoidAsync("toggleFullScreen");
    }

    public void StartTurn(object sender, List<Player> players)
    {
        UpdateEndTurnButton(true);
        this.StateHasChanged();
    }

    public void UpdateEndTurnButton(object sender, EventArgs e)
    {
        UpdateEndTurnButton(false);
    }

    public void UpdateEndTurnButton(bool startTurn = false)
    {
        var previous = this.EndTurnButtonClass;

        if (!this?.BlazorGame?.BlazorTurnResolver?.ActivePlayers?.Contains(this.BlazorGame.CurrentPlayer) ?? true)
            this.EndTurnButtonClass = "btn-secondary";
        else
        {
            if (this.BlazorGame.ActionTracker.GetAvailableActions() > 0 || startTurn)
                this.EndTurnButtonClass = "btn-warning";
            else
                this.EndTurnButtonClass = "btn-success";
        }

        if (previous != this.EndTurnButtonClass)
            this.StateHasChanged();
    }

}
