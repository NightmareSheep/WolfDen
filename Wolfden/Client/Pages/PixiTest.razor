@page "/PixiTest"
@layout EmptyLayout
@using Wolfden.Client.Other;
@using LupusBlazor.Pixi;
@using LupusBlazor.Pixi.LupusPixi
@using LupusBlazor.Animation;
@using Lupus.Other;
@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable;

<div id="test-game"></div>

@code {
    private Application? Application { get; set; }
    private ViewPort? Viewport { get; set; }
    private PixiUnit? Unit { get; set; }
    private PixiUnit? Unit2 { get; set; }
    private ActionQueue? ActionQueue { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        this.ActionQueue = new ActionQueue();
        await base.OnAfterRenderAsync(firstRender);
        this.Application = new Application(JSRuntime);
        this.Application.ResourcesLoadedEvent += LoadSprite;
        await this.Application.Initialize("test-game");
        this.Application.ScaleMode = ScaleMode.Nearest;

        //await this.Application.AddSpriteSheet("sprites", "/Images/sprites.json");
        //await this.Application.Load();

        await LoadSprite();

    }

    public async Task LoadSprite()
    {
        this.Viewport = await new ViewPort(JSRuntime, this.Application, 3000, 3000).Initialize();
        this.Unit = new PixiUnit(JSRuntime, this.Application, Statics.AudioPlayer, Actors.Goblin, this.ActionQueue);
        await this.Unit.Initialize();
        this.Unit2 = new PixiUnit(JSRuntime, this.Application, Statics.AudioPlayer, Actors.Goblin, this.ActionQueue);
        await this.Unit2.Initialize();

        this.Unit2.Container.Y = 16;

        await this.Application.Stage.AddChild(this.Viewport);
        await this.Viewport.AddChild(this.Unit.Container);
        await this.Viewport.AddChild(this.Unit2.Container);

        await this.Unit.PlayAnimation(LupusBlazor.Animation.Animations.Idle);
        await this.Unit2.PlayAnimation(LupusBlazor.Animation.Animations.Idle);

        var text = new LupusBlazor.Pixi.Text(this.JSRuntime, "0");

        await text.Initialize();

        text.ScaleX = 0.3f;
        text.ScaleY = 0.3f;
        text.X = -8;
        text.Y = -8;
        await text.SetAnchor(0.5f);
        text.Color = System.Drawing.KnownColor.Red;
        var filter = await PixiFilters.GetTeamFilter(System.Drawing.KnownColor.Red);
        await this.Unit.Container.AddFilter(filter);

        await this.Unit2.Container.AddFilter(PixiFilters.Filters[PixiFilter.GlowFilter]);

        await this.Unit2.Container.AddChild(text);
        Unit2.UnitAnimations[Unit2.BaseAnimation].Sprite.Tint = System.Drawing.KnownColor.Red;
        Unit2.UnitAnimations[Unit2.BaseAnimation].Sprite.Alpha = 0.5f;

        var attack = async () => {
            await Task.Delay(2000);
            await this.Unit.QueueAnimation(Animations.Attack, Direction.North); 
            await this.Unit.QueueAnimation(Animations.Attack, Direction.South);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.South);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.South);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.East);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.East);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.North);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.West);
            await this.Unit2.QueueAnimation(Animations.Move, Direction.West);
        };

        attack();
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (this.Application != null)
            await this.Application.Dispose();
    }

}
